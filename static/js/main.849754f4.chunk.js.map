{"version":3,"sources":["Screener.js","search.js","social-config.js","login.js","ScreenNav.js","App.js","serviceWorker.js","index.js","Chart.js"],"names":["pointerTothis","myptr","datal","Screener","props","state","stockChartValueX","stockChartValueY","stockName","inProgress","this","fetchCost","API_CALL","stockValuesX","stockValuesY","fetch","then","response","json","data","key","push","k","setState","prevProps","type","color","height","width","style","display","float","asyncOnClick","filename","Chart","React","Component","googleConfig","client_id","scope","facebookConfig","appId","cookie","xfbml","version","Login","showModal","loading","error","method","console","log","Button","className","variant","textAlign","marginBottom","onClick","openModal","id","visible","onCloseModal","closeModal","bind","tabs","afterChange","afterTabsChange","loginError","label","registerError","startLoading","finishLoading","providers","facebook","config","onLoginSuccess","onLoginFail","google","Search","divRef","createRef","e","calledit","val","target","value","Form","inline","FormControl","onChange","mychangeHandler","placeholder","callit","ScreenNav","presentAddress","node","basename","process","path","render","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","change","changeAddress","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","req","require","request","port","res","on","d","stdout","write","end","marginLeft","x","y","mode","marker","layout","title","autosize","responsive"],"mappings":"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","file":"static/js/main.849754f4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Chart from \"./Chart\";\r\nimport { CSVLink } from \"react-csv\";\r\n// import { Button } from \"react-bootstrap\";\r\nimport Loader from \"react-loader-spinner\";\r\nlet datal = [];\r\nlet pointerTothis;\r\nclass Screener extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      stockChartValueX: [],\r\n      stockChartValueY: [],\r\n      stockName: this.props.stockName,\r\n      inProgress: true,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    pointerTothis = this;\r\n    // this.props.changeAddress();\r\n    this.fetchCost();\r\n  }\r\n\r\n  fetchCost() {\r\n    const APIKEY = \"2RON97OB1OCVMAXA\";\r\n    let API_CALL =\r\n      \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=\" +\r\n      this.props.stockName +\r\n      \".BSE&outputsize=compact&apikey=\" +\r\n      APIKEY;\r\n    let stockValuesX = [];\r\n    let stockValuesY = [];\r\n    fetch(API_CALL)\r\n      .then(function (response) {\r\n        return response.json();\r\n      })\r\n      .then(function (data) {\r\n        datal.push([\r\n          \"date\",\r\n          \"open\",\r\n          \"high\",\r\n          \"low\",\r\n          \"close\",\r\n          \"adjusted close\",\r\n          \"volume\",\r\n          \"dividend amount\",\r\n          \"split coefficient\",\r\n        ]);\r\n        for (var key in data[\"Time Series (Daily)\"]) {\r\n          let k = [];\r\n          k.push(key);\r\n          k.push(data[\"Time Series (Daily)\"][key][\"1. open\"]);\r\n          k.push(data[\"Time Series (Daily)\"][key][\"2. high\"]);\r\n          k.push(data[\"Time Series (Daily)\"][key][\"3. low\"]);\r\n          k.push(data[\"Time Series (Daily)\"][key][\"4. close\"]);\r\n          k.push(data[\"Time Series (Daily)\"][key][\"5. adjusted close\"]);\r\n          k.push(data[\"Time Series (Daily)\"][key][\"6. volume\"]);\r\n          k.push(data[\"Time Series (Daily)\"][key][\"7. dividend amount\"]);\r\n          k.push(data[\"Time Series (Daily)\"][key][\"8. split coefficient\"]);\r\n          stockValuesX.push(key);\r\n          stockValuesY.push(data[\"Time Series (Daily)\"][key][\"4. close\"]);\r\n          datal.push(k);\r\n        }\r\n        pointerTothis.setState({\r\n          stockChartValueX: stockValuesX,\r\n          stockChartValueY: stockValuesY,\r\n        });\r\n        pointerTothis.setState({ inProgress: false });\r\n      });\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    // Typical usage (don't forget to compare props):\r\n\r\n    if (this.props.stockName !== prevProps.stockName) {\r\n      this.setState({ inProgress: true });\r\n      this.fetchCost();\r\n    }\r\n  }\r\n  render() {\r\n    if (this.state.inProgress) {\r\n      return (\r\n        <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />\r\n      );\r\n    } else\r\n      return (\r\n        <div>\r\n          {/* <strong>STOCK SCREENER</strong> */}\r\n\r\n          <div style={{ display: \"inline-block\", float: \"right\" }}>\r\n            <CSVLink\r\n              data={datal}\r\n              asyncOnClick={true}\r\n              filename={\"Times series\" + this.props.stockName + \".csv\"}\r\n            >\r\n              import csv\r\n            </CSVLink>\r\n          </div>\r\n          <br></br>\r\n          <div style={{ display: \"inline-center\" }}>\r\n            <Chart\r\n              stockName={this.props.stockName}\r\n              stockChartValueX={this.state.stockChartValueX}\r\n              stockChartValueY={this.state.stockChartValueY}\r\n            ></Chart>\r\n            <p>\r\n              These are the closing prices of {this.props.stockName} plotted for\r\n              last 100 days\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n  }\r\n}\r\nexport default Screener;\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControl } from \"react-bootstrap\";\r\nlet myptr;\r\nclass Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stockName: this.props.stockName,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.divRef = React.createRef();\r\n    myptr = this;\r\n  }\r\n  callit(e) {\r\n    myptr.props.calledit(myptr.state.stockName);\r\n  }\r\n  mychangeHandler(e) {\r\n    let val = e.target.value;\r\n    myptr.setState({ stockName: val });\r\n    // console.log(myptr.state.stockName);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form\r\n        inline\r\n        style={{\r\n          textAlign: \"center\",\r\n          display: \"inline-block\",\r\n          marginBottom: \"4px\",\r\n        }}\r\n      >\r\n        <FormControl\r\n          type=\"text\"\r\n          onChange={this.mychangeHandler}\r\n          placeholder=\"Security id\"\r\n          className=\"mr-sm-2\"\r\n        />\r\n        <Button variant=\"primary\" onClick={this.callit}>\r\n          Search\r\n        </Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\nexport default Search;\r\n","const facebook = {\r\n  appId: \"558047108219015\",\r\n  cookie: true,\r\n  xfbml: true,\r\n  version: \"v2.11\",\r\n  scope: \"email\",\r\n};\r\nconst google = {\r\n  client_id:\r\n    \"15410921000-9ppfm8hm7l76qr4dv1ito2f3620rvvbv.apps.googleusercontent.com\",\r\n  scope: \"https://www.googleapis.com/auth/plus.login\",\r\n};\r\n\r\nexport const googleConfig = google;\r\nexport const facebookConfig = facebook;\r\n","import React from \"react\";\r\nimport ReactModalLogin from \"react-modal-login\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { facebookConfig, googleConfig } from \"./social-config\";\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showModal: false,\r\n      loading: false,\r\n      error: null,\r\n    };\r\n  }\r\n\r\n  openModal() {\r\n    this.setState({\r\n      showModal: true,\r\n    });\r\n  }\r\n\r\n  closeModal() {\r\n    this.setState({\r\n      showModal: false,\r\n      error: null,\r\n    });\r\n  }\r\n\r\n  onLoginSuccess(method, response) {\r\n    console.log(\"logged successfully with \" + method);\r\n    this.setState({\r\n      loading: false,\r\n    });\r\n  }\r\n\r\n  onLoginFail(method, response) {\r\n    console.log(\"logging failed with \" + method);\r\n    this.setState({\r\n      error: response,\r\n    });\r\n    this.setState({\r\n      loading: false,\r\n    });\r\n  }\r\n\r\n  startLoading() {\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n  }\r\n\r\n  finishLoading() {\r\n    this.setState({\r\n      loading: false,\r\n    });\r\n  }\r\n\r\n  afterTabsChange() {\r\n    this.setState({\r\n      error: null,\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          className=\"btn\"\r\n          variant=\"success\"\r\n          style={{\r\n            display: \"inline-block\",\r\n            textAlign: \"center\",\r\n            marginBottom: \"4px\",\r\n          }}\r\n          onClick={() => {\r\n            this.openModal();\r\n          }}\r\n        >\r\n          Sign in\r\n        </Button>\r\n        <ReactModalLogin\r\n          id=\"form\"\r\n          visible={this.state.showModal}\r\n          onCloseModal={this.closeModal.bind(this)}\r\n          loading={this.state.loading}\r\n          error={this.state.error}\r\n          //  form={<Form></Form>}\r\n          tabs={{\r\n            afterChange: this.afterTabsChange.bind(this),\r\n          }}\r\n          loginError={{\r\n            label: \"Couldn't sign in, please try again.\",\r\n          }}\r\n          registerError={{\r\n            label: \"Couldn't sign up, please try again.\",\r\n          }}\r\n          startLoading={this.startLoading.bind(this)}\r\n          finishLoading={this.finishLoading.bind(this)}\r\n          providers={{\r\n            facebook: {\r\n              config: facebookConfig,\r\n              onLoginSuccess: this.onLoginSuccess.bind(this),\r\n              onLoginFail: this.onLoginFail.bind(this),\r\n              label: \"Continue with Facebook\",\r\n            },\r\n            google: {\r\n              config: googleConfig,\r\n              onLoginSuccess: this.onLoginSuccess.bind(this),\r\n              onLoginFail: this.onLoginFail.bind(this),\r\n              label: \"Continue with Google\",\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\n// import chart from \"./chart\";\r\nimport Screener from \"./Screener.js\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Login from \"./login\";\r\n// import NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport Search from \"./search.js\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nclass ScreenNav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stockName: \"NCC\",\r\n      presentAddress: \"/\",\r\n    };\r\n  }\r\n  change(node) {\r\n    this.setState({ stockName: node });\r\n    //console.log(node);\r\n  }\r\n  // changeAddress(node) {\r\n  //   this.setState({ presentAddress: node });\r\n  // }\r\n  render() {\r\n    // const store = configureStore({ history });\r\n    return (\r\n      <div className=\"ScreenerNav\">\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n          <Route\r\n            path=\"/\"\r\n            render={() => {\r\n              return (\r\n                <div>\r\n                  <Navbar bg=\"light\" expand=\"lg\">\r\n                    <Navbar.Brand href=\"/\">SCREENER</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                      <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#\">Home</Nav.Link>\r\n                        <Nav.Link href=\"https://docs.google.com/spreadsheets/d/1ymMHn4gE9Gjjtvw3bGVlD_9CbdfDm01_cLBRd5nRN_M/edit#gid=1328995412\">\r\n                          Browse\r\n                        </Nav.Link>\r\n                      </Nav>\r\n\r\n                      <Search\r\n                        stockName={this.state.stockName}\r\n                        calledit={(node) => {\r\n                          this.change(node);\r\n                        }}\r\n                      ></Search>\r\n\r\n                      {\"  \"}\r\n                      <Login></Login>\r\n                    </Navbar.Collapse>\r\n                  </Navbar>\r\n                  <Screener\r\n                    changeAddress={() => {\r\n                      this.changeAddress(\"/stock\");\r\n                    }}\r\n                    stockName={this.state.stockName}\r\n                  ></Screener>\r\n                </div>\r\n              );\r\n            }}\r\n          />{\" \"}\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScreenNav;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport ScreenNav from \"./ScreenNav\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ScreenNav></ScreenNav>\n\n      {/* <chart></chart> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nconst https = require(\"https\");\r\n\r\nconst options = {\r\n  hostname: \"financialmodelingprep.com\",\r\n  port: 443,\r\n  path: \"/api/v3/quote-short/AAPL\",\r\n  method: \"GET\",\r\n};\r\n\r\nconst req = https.request(options, (res) => {\r\n  res.on(\"data\", (d) => {\r\n    process.stdout.write(d);\r\n  });\r\n});\r\n\r\nreq.on(\"error\", (error) => {\r\n  console.error(error);\r\n});\r\n\r\nreq.end();\r\nclass Chart extends React.Component {\r\n  render() {\r\n    return (\r\n      <Plot\r\n        style={{\r\n          marginLeft: \"30px\",\r\n          width: \"95%\",\r\n          height: \"100%\",\r\n        }}\r\n        data={[\r\n          {\r\n            x: this.props.stockChartValueX,\r\n            y: this.props.stockChartValueY,\r\n            type: \"scatter\",\r\n            mode: \"lines+markers\",\r\n            marker: { color: \"purple\" },\r\n          },\r\n        ]}\r\n        layout={{\r\n          height: 500,\r\n          title: this.props.stockName,\r\n          autosize: true,\r\n        }}\r\n        config={{\r\n          responsive: true,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Chart;\r\n"],"sourceRoot":""}