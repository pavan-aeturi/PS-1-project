{"version":3,"sources":["assets/vt.jpg","Screener.js","search.js","Chart.js","VirtualTrade.js","ScreenNav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","pointerTothis","myptr","Chart","data","x","this","props","stockChartValueX","y","stockChartValueY","type","mode","marker","color","layout","width","height","title","stockName","React","Component","Screener","state","inProgress","fetchCost","changeAddress","API_CALL","stockValuesX","stockValuesY","fetch","then","response","json","key","console","log","push","setState","prevProps","VirtualTrade","className","Search","divRef","createRef","e","calledit","val","target","value","Form","inline","FormControl","onChange","mychangeHandler","placeholder","Button","variant","onClick","callit","ScreenNav","presentAddress","node","basename","process","path","render","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","change","exact","strict","src","logo","alt","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83bdaf94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vt.f9b19e5c.jpg\";","import React from \"react\";\r\nimport Chart from \"./Chart\";\r\nimport Loader from \"react-loader-spinner\";\r\nlet pointerTothis;\r\nclass Screener extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      stockChartValueX: [],\r\n      stockChartValueY: [],\r\n      stockName: this.props.stockName,\r\n      inProgress: true,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    pointerTothis = this;\r\n    this.fetchCost();\r\n    this.props.changeAddress();\r\n  }\r\n\r\n  fetchCost() {\r\n    const APIKEY = \"2RON97OB1OCVMAXA\";\r\n    let API_CALL =\r\n      \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=\" +\r\n      this.props.stockName +\r\n      \".BSE&outputsize=compact&apikey=\" +\r\n      APIKEY;\r\n    let stockValuesX = [];\r\n    let stockValuesY = [];\r\n    fetch(API_CALL)\r\n      .then(function (response) {\r\n        return response.json();\r\n      })\r\n      .then(function (data) {\r\n        console.log(data);\r\n        for (var key in data[\"Time Series (Daily)\"]) {\r\n          stockValuesX.push(key);\r\n          stockValuesY.push(data[\"Time Series (Daily)\"][key][\"1. open\"]);\r\n        }\r\n        pointerTothis.setState({\r\n          stockChartValueX: stockValuesX,\r\n          stockChartValueY: stockValuesY,\r\n        });\r\n        pointerTothis.setState({ inProgress: false });\r\n      });\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    // Typical usage (don't forget to compare props):\r\n\r\n    if (this.props.stockName !== prevProps.stockName) {\r\n      this.setState({ inProgress: true });\r\n      this.fetchCost();\r\n    }\r\n  }\r\n  render() {\r\n    if (this.state.inProgress) {\r\n      return (\r\n        <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />\r\n      );\r\n    } else\r\n      return (\r\n        <Chart\r\n          stockName={this.props.stockName}\r\n          stockChartValueX={this.state.stockChartValueX}\r\n          stockChartValueY={this.state.stockChartValueY}\r\n        ></Chart>\r\n      );\r\n  }\r\n}\r\nexport default Screener;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nlet myptr;\r\nclass Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stockName: this.props.stockName,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.divRef = React.createRef();\r\n    myptr = this;\r\n  }\r\n  callit(e) {\r\n    myptr.props.calledit(myptr.state.stockName);\r\n  }\r\n  mychangeHandler(e) {\r\n    let val = e.target.value;\r\n    myptr.setState({ stockName: val });\r\n    console.log(myptr.state.stockName);\r\n  }\r\n  render() {\r\n    return (\r\n      <Form inline>\r\n        <FormControl\r\n          type=\"text\"\r\n          onChange={this.mychangeHandler}\r\n          placeholder=\"NCC\"\r\n          className=\"mr-sm-2\"\r\n        />\r\n        <Button variant=\"primary\" onClick={this.callit}>\r\n          Search\r\n        </Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\nexport default Search;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nclass Chart extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Stock Screener</h1>\r\n        <Plot\r\n          data={[\r\n            {\r\n              x: this.props.stockChartValueX,\r\n              y: this.props.stockChartValueY,\r\n              type: \"scatter\",\r\n              mode: \"lines+markers\",\r\n              marker: { color: \"purple\" },\r\n            },\r\n          ]}\r\n          layout={{ width: 1000, height: 550, title: this.props.stockName }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass VirtualTrade extends React.Component {\r\n  componentDidMount() {\r\n    this.props.changeAddress();\r\n  }\r\n  render() {\r\n    return <div className=\"VirtualTrade\"></div>;\r\n  }\r\n}\r\n\r\nexport default VirtualTrade;\r\n","import React, { Component } from \"react\";\r\n// import chart from \"./chart\";\r\nimport Screener from \"./Screener.js\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport logo from \"./assets/vt.jpg\";\r\nimport VirtualTrade from \"./VirtualTrade\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Button from \"react-bootstrap/Button\";\r\n// import NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Search from \"./search.js\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nclass ScreenNav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stockName: \"NCC\",\r\n      presentAddress: \"/\",\r\n    };\r\n  }\r\n  change(node) {\r\n    this.setState({ stockName: node });\r\n    console.log(node);\r\n  }\r\n  changeAddress(node) {\r\n    this.setState({ presentAddress: node });\r\n  }\r\n  render() {\r\n    // const store = configureStore({ history });\r\n    return (\r\n      <div className=\"ScreenerNav\">\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n          <Route\r\n            path=\"/\"\r\n            render={() => {\r\n              return (\r\n                <Navbar bg=\"light\" expand=\"lg\">\r\n                  <Navbar.Brand href=\"/\">Virtual Trade</Navbar.Brand>\r\n                  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                  <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                      <Nav.Link href=\"/\">Home</Nav.Link>\r\n                      <Nav.Link href=\"/PS-1-project/portfolio\">\r\n                        Portfolio\r\n                      </Nav.Link>\r\n                      <Nav.Link href=\"/PS-1-project/stock\">Analyse</Nav.Link>\r\n                    </Nav>\r\n                    {this.state.presentAddress === \"/stock\" && (\r\n                      <Search\r\n                        stockName={this.state.stockName}\r\n                        calledit={(node) => {\r\n                          this.change(node);\r\n                        }}\r\n                      ></Search>\r\n                    )}\r\n                  </Navbar.Collapse>\r\n                </Navbar>\r\n              );\r\n            }}\r\n          />{\" \"}\r\n          <Route\r\n            path=\"/portfolio\"\r\n            exact\r\n            render={() => {\r\n              return (\r\n                <VirtualTrade\r\n                  changeAddress={() => {\r\n                    this.changeAddress(\"/portfolio\");\r\n                  }}\r\n                ></VirtualTrade>\r\n              );\r\n            }}\r\n          />\r\n          <Route\r\n            path=\"/stock\"\r\n            exact\r\n            render={() => {\r\n              return (\r\n                <Screener\r\n                  changeAddress={() => {\r\n                    this.changeAddress(\"/stock\");\r\n                  }}\r\n                  stockName={this.state.stockName}\r\n                ></Screener>\r\n              );\r\n            }}\r\n          />\r\n          <Route\r\n            path=\"/\"\r\n            strict\r\n            exact\r\n            render={() => {\r\n              return (\r\n                <div>\r\n                  <br></br>\r\n                  <img src={logo} alt=\"Logo\" width=\"800px\" height=\"300px\" />\r\n                  <br></br>\r\n                  <br></br>\r\n                  <Button variant=\"primary\">Login</Button>\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n          {/* <chart></chart> */}\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScreenNav;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport ScreenNav from \"./ScreenNav\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ScreenNav></ScreenNav>\n\n      {/* <chart></chart> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}